#!/usr/bin/env python3
"""
Specific test for asset creation with empty threats array
Tests the exact scenario requested by the user
"""

import requests
import json
import sys

# Get backend URL from frontend .env file
def get_backend_url():
    try:
        with open('/app/frontend/.env', 'r') as f:
            for line in f:
                if line.startswith('REACT_APP_BACKEND_URL='):
                    return line.split('=', 1)[1].strip()
    except Exception as e:
        print(f"Error reading frontend .env: {e}")
        return None

BASE_URL = get_backend_url()
if not BASE_URL:
    print("ERROR: Could not get REACT_APP_BACKEND_URL from frontend/.env")
    sys.exit(1)

API_URL = f"{BASE_URL}/api"
print(f"Testing API at: {API_URL}")

def login_and_get_token():
    """Login and get auth token"""
    login_data = {
        "username": "admin",
        "password": "admin123"
    }
    
    try:
        response = requests.post(f"{API_URL}/auth/login", json=login_data)
        print(f"Login response status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            token = data.get('access_token')
            print("‚úÖ Login successful")
            return token
        else:
            print(f"‚ùå Login failed: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Login error: {e}")
        return None

def test_asset_creation():
    """Test asset creation with empty threats array"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º threats ===")
    
    # Get auth token
    token = login_and_get_token()
    if not token:
        return False
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Asset data as specified in the request
    asset_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–∫—Ç–∏–≤",
        "category": "–ò–¢-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", 
        "owner": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü",
        "criticality": "–°—Ä–µ–¥–Ω—è—è",
        "status": "–ê–∫—Ç—É–∞–ª–µ–Ω",
        "threats": []
    }
    
    print(f"\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/assets —Å –¥–∞–Ω–Ω—ã–º–∏:")
    print(json.dumps(asset_data, indent=2, ensure_ascii=False))
    
    try:
        response = requests.post(f"{API_URL}/assets", json=asset_data, headers=headers)
        print(f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: HTTP {response.status_code}")
        
        if response.status_code == 200:
            asset = response.json()
            print("‚úÖ –£–°–ü–ï–•: –ê–∫—Ç–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"\n–î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞:")
            print(json.dumps(asset, indent=2, ensure_ascii=False))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–µ threats —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –∫–∞–∫ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            if 'threats' in asset and asset['threats'] == []:
                print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê: –ü–æ–ª–µ threats –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤: {asset['threats']}")
                return True
            else:
                print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª–µ threats —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {asset.get('threats')}")
                return False
                
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤")
            print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            
            try:
                error_data = response.json()
                print("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
                print(json.dumps(error_data, indent=2, ensure_ascii=False))
            except:
                print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            
            return False
            
    except Exception as e:
        print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    """Main function"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ —á–µ—Ä–µ–∑ API")
    print("=" * 60)
    
    success = test_asset_creation()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ threats –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–∞.")
    else:
        print("‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ threats.")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)